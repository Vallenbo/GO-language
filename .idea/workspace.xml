<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="ALL" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="34cdedf6-327a-4921-b292-fb282c223ee3" name="更改" comment="">
      <change afterPath="$PROJECT_DIR$/test/maxNumber_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/dataSources.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.vscode/launch.json" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/DB/1、mysql使用.go" beforeDir="false" afterPath="$PROJECT_DIR$/DB/mysql_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/GinNote/1、gin框架渲染.go" beforeDir="false" afterPath="$PROJECT_DIR$/GinNote/1、gin框架渲染.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/GinNote/gin_protobufClient.go" beforeDir="false" afterPath="$PROJECT_DIR$/Go_grpc/gin_protobufClient.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/GinNote/hello_grpc/hello.pb.go" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/Go_grpc/grpc_client.go" beforeDir="false" afterPath="$PROJECT_DIR$/Go_grpc/grpc_client.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Go_grpc/grpc_server.go" beforeDir="false" afterPath="$PROJECT_DIR$/Go_grpc/grpc_server.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/gin/jwt_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/gin/jwt_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/go.mod" beforeDir="false" afterPath="$PROJECT_DIR$/go.mod" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/go.sum" beforeDir="false" afterPath="$PROJECT_DIR$/go.sum" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/log_use/logrusHookDB_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/log_use/logrusHookDB_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/main/NetClient.go" beforeDir="false" afterPath="$PROJECT_DIR$/main/NetClient.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/net/NetClient_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/net/NetClient_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/net/NetServer_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/net/NetServer_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/maxNumber.go" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/test/stringtest.go" beforeDir="false" afterPath="$PROJECT_DIR$/test/stringtest_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/test.go" beforeDir="false" afterPath="$PROJECT_DIR$/test/test_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/test1.go" beforeDir="false" afterPath="$PROJECT_DIR$/test/test1_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/test_comput.go" beforeDir="false" afterPath="$PROJECT_DIR$/test/comput_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/wifiMock_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/test/wifiMock_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/位运算.go" beforeDir="false" afterPath="$PROJECT_DIR$/test/and_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/分金币.go" beforeDir="false" afterPath="$PROJECT_DIR$/test/allotGold_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/数组求长度.go" beforeDir="false" afterPath="$PROJECT_DIR$/test/arrayLen_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/文件内去除字符串.go" beforeDir="false" afterPath="$PROJECT_DIR$/test/fileDelStr_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/文件名去除指定内容.go" beforeDir="false" afterPath="$PROJECT_DIR$/test/fileNameDelContext_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/移动子目录文件至指定目录.go" beforeDir="false" afterPath="$PROJECT_DIR$/test/mvSubDirToOther_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/viper_use/config.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/viper_use/config.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/viper_use/viper使用.go" beforeDir="false" afterPath="$PROJECT_DIR$/viper_use/viper_test.go" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Go File" />
        <option value="Go Application" />
      </list>
    </option>
  </component>
  <component name="GOROOT" url="file://D:/Program Files/Go" />
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;customColor&quot;: &quot;&quot;,
  &quot;associatedIndex&quot;: 5
}</component>
  <component name="ProjectId" id="2Zi8QnL5RSsUjqHIgiXE6mz0g2s" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="autoscrollToSource" value="true" />
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;DefaultGoTemplateProperty&quot;: &quot;Go Application&quot;,
    &quot;Go 构建.go build GoNotebook.executor&quot;: &quot;Run&quot;,
    &quot;Go 构建.go build GoNotebook/2BasicContent2.executor&quot;: &quot;Run&quot;,
    &quot;Go 构建.go build GoNotebook/cgo.executor&quot;: &quot;Run&quot;,
    &quot;Go 构建.go build GoNotebook/main.executor&quot;: &quot;Run&quot;,
    &quot;Go 构建.go build GoNotebook/test (1).executor&quot;: &quot;Run&quot;,
    &quot;Go 构建.go build GoNotebook/test (2).executor&quot;: &quot;Run&quot;,
    &quot;Go 构建.go build GoNotebook/test.executor&quot;: &quot;Run&quot;,
    &quot;Go 构建.go build GoNotebook/viper_use.executor&quot;: &quot;Run&quot;,
    &quot;Go 构建.go build go-language/main (1).executor&quot;: &quot;Run&quot;,
    &quot;Go 构建.go build go-language/main.executor&quot;: &quot;Run&quot;,
    &quot;Go 构建.go build viper使用.go.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/Concurrent 中的 Test_concur.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/DataStructure 中的 Test_treeQueue (1).executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/DataStructure 中的 Test_treeQueue.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/GORM 中的 Test_createData.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/GORM 中的 Test_crud.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/gin 中的 Test_jwt.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/io 中的 Test_WriterToFile.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/io 中的 Test_openFileWrite.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/io 中的 Test_readerFile.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/io 中的 Test_stdin.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/json 中的 Test_gjson.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/log 中的 Test_logrusHook.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/mathAndRand 中的 Test_rand.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/net 中的 Test_NetClient.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/net 中的 Test_NetServer.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/test 中的 Test_wifeMock.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/webSocket 中的 Test_clent.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/webSocket 中的 Test_client.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.GoNotebook/webSocket 中的 Test_server.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.TestJwt in GoNotebook/gin.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.Test_StructValidation in GoNotebook/validator.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.Test_Transaction in GoNotebook/GORM.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.Test_createData in GoNotebook/GORM.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.Test_crud in GoNotebook/GORM.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.Test_httpServer in GoNotebook/http.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.Test_sliceAdd in GoNotebook/slice.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.Test_treeQueue in GoNotebook/tree.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.UseRand_test.go.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/cron 中的 Test_cron.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/fakeData 中的 Test_fakeIP4.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/log 中的 Test_LogrusHook.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/log 中的 Test_logrusHook.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/log_use 中的 Test_LogrusHook (1).executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/log_use 中的 Test_LogrusHook.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/midServer 中的 Test_conEtcd.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/net 中的 Test_NetClient.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/net 中的 Test_NetServer.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/runtime_use 中的 Test_runtime.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/test 中的 Test_IPMaskSegment.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/test 中的 Test_fileNameDelContext.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/test 中的 Test_generateCidr.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/test 中的 Test_ip (1).executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/test 中的 Test_ip.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go-language/viper_use 中的 Test_viperListenConf.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.log_use 中的 Test_LogrusHook.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.log_use 中的 Test_logrusHookDB.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.tree_queue_test.go.executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.formatter.settings.were.checked&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.migrated.go.modules.settings&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.modules.automatic.dependencies.download&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.modules.go.list.on.any.changes.was.set&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;true&quot;,
    &quot;code.cleanup.on.save&quot;: &quot;true&quot;,
    &quot;database.data.extractors.current.export.id&quot;: &quot;SQL 插入&quot;,
    &quot;database.data.extractors.current.id&quot;: &quot;SQL 插入&quot;,
    &quot;deletionFromPopupRequiresConfirmation&quot;: &quot;false&quot;,
    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
    &quot;go.import.settings.migrated&quot;: &quot;true&quot;,
    &quot;go.sdk.automatically.set&quot;: &quot;true&quot;,
    &quot;js.buildTools.gulp.gulp_package_dir&quot;: &quot;&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/98560&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.stylelint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.stylelint&quot;: &quot;&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;rearrange.code.on.save&quot;: &quot;true&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;cn.yiiguxing.plugin.translate&quot;
  },
  &quot;keyToStringList&quot;: {
    &quot;DatabaseDriversLRU&quot;: [
      &quot;mysql&quot;,
      &quot;clickhouse&quot;
    ]
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="E:\Project\go-language" />
      <recent name="E:\Project\go-language\gin" />
      <recent name="E:\Project\go-language\Go_grpc\grpc四种模式\双相端流服务模式" />
      <recent name="E:\Project\GoNotebook\GinNote\hello_grpc" />
      <recent name="E:\Project\GoNotebook\GinNote" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="E:\Project\go-language\Go_grpc" />
      <recent name="E:\Project\go-language\runtime_use" />
      <recent name="E:\Project\go-language\Concurrent" />
      <recent name="E:\Project\go-language\main" />
      <recent name="E:\Project\go-language\net" />
    </key>
  </component>
  <component name="RunManager" selected="Go 测试.go-language/test 中的 Test_fileNameDelContext">
    <configuration default="true" type="GoApplicationRunConfiguration" factoryName="Go Application">
      <module name="GoNotebook" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="GoNotebook" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="GoTestRunConfiguration" factoryName="Go Test">
      <module name="GoNotebook" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="DIRECTORY" />
      <package value="GoNotebook" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="HttpClient.HttpRequestRunConfigurationType" factoryName="HTTP Request" environment="&lt;No Environment&gt;" path="">
      <method v="2" />
    </configuration>
    <configuration default="true" type="js.build_tools.gulp">
      <node-interpreter>project</node-interpreter>
      <node-options />
      <gulpfile />
      <tasks />
      <arguments />
      <envs />
      <method v="2" />
    </configuration>
    <configuration default="true" type="GoApplicationRunConfiguration" factoryName="Go Application">
      <module name="goNote" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="GoNotebook" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="go build go-language/main (1)" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="goNote" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="FILE" />
      <package value="go-language/main" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/main/generateIPsegment.go" />
      <method v="2" />
    </configuration>
    <configuration name="go build go-language/main (1)" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="GoNotebook" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="FILE" />
      <package value="go-language/main" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/main/generateIPsegment.go" />
      <method v="2" />
    </configuration>
    <configuration name="go build go-language/main" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="goNote" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="FILE" />
      <package value="go-language/main" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/main/etcdConn.go" />
      <method v="2" />
    </configuration>
    <configuration name="go build go-language/main" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="GoNotebook" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="FILE" />
      <package value="go-language/main" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/main/etcdConn.go" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="GoTestRunConfiguration" factoryName="Go Test">
      <module name="goNote" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="DIRECTORY" />
      <package value="GoNotebook" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <method v="2" />
    </configuration>
    <configuration name="go-language/midServer 中的 Test_conEtcd" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="goNote" />
      <working_directory value="$PROJECT_DIR$/midServer" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="go-language/midServer" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTest_conEtcd\E$" />
      <method v="2" />
    </configuration>
    <configuration name="go-language/midServer 中的 Test_conEtcd" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="GoNotebook" />
      <working_directory value="$PROJECT_DIR$/midServer" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="go-language/midServer" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTest_conEtcd\E$" />
      <method v="2" />
    </configuration>
    <configuration name="go-language/test 中的 Test_fileNameDelContext" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="goNote" />
      <working_directory value="$PROJECT_DIR$/test" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="go-language/test" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTest_fileNameDelContext\E$" />
      <method v="2" />
    </configuration>
    <configuration name="go-language/test 中的 Test_fileNameDelContext" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="GoNotebook" />
      <working_directory value="$PROJECT_DIR$/test" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="go-language/test" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTest_fileNameDelContext\E$" />
      <method v="2" />
    </configuration>
    <configuration name="go-language/test 中的 Test_ip (1)" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="goNote" />
      <working_directory value="$PROJECT_DIR$/test" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="go-language/test" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTest_ip\E$" />
      <method v="2" />
    </configuration>
    <configuration name="go-language/test 中的 Test_ip (1)" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="GoNotebook" />
      <working_directory value="$PROJECT_DIR$/test" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="go-language/test" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTest_ip\E$" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="HttpClient.HttpRequestRunConfigurationType" factoryName="HTTP Request" environment="&lt;No Environment&gt;" path="">
      <method v="2" />
    </configuration>
    <configuration default="true" type="js.build_tools.gulp">
      <node-interpreter>project</node-interpreter>
      <node-options />
      <gulpfile />
      <tasks />
      <arguments />
      <envs />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Go 测试.go-language/test 中的 Test_fileNameDelContext" />
        <item itemvalue="Go 构建.go build go-language/main" />
        <item itemvalue="Go 测试.go-language/midServer 中的 Test_conEtcd" />
        <item itemvalue="Go 构建.go build go-language/main (1)" />
        <item itemvalue="Go 测试.go-language/test 中的 Test_ip (1)" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-gosdk-5df93f7ad4aa-df9ad98b711f-org.jetbrains.plugins.go.sharedIndexes.bundled-GO-242.23339.24" />
        <option value="bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-GO-242.23339.24" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="应用程序级" UseSingleDictionary="true" transferred="true" />
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VgoProject">
    <settings-migrated>true</settings-migrated>
  </component>
</project>