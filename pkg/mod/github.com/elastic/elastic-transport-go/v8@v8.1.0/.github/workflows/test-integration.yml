name: Integration

on: [ push, pull_request ]

env:
  GITHUB_ACTIONS: true
  ELASTICSEARCH_VERSION: elasticsearch:master-SNAPSHOT

jobs:
  test-integ:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with: { fetch-depth: 1 }
      - uses: actions/setup-go@v2.1.3
        with: { go-version: '1.x' }
      - run: go version
#      - name: Increase system limits
#        run: |
#          sudo swapoff -a
#          sudo sysctl -w vm.swappiness=1
#          sudo sysctl -w fs.file-max=262144
#          sudo sysctl -w vm.max_map_count=262144
      - name: Launch Elasticsearch
        run: |
          docker pull --quiet docker.elastic.co/elasticsearch/${{ env.ELASTICSEARCH_VERSION }}
          docker pull --quiet curlimages/curl
          docker network inspect elasticsearch > /dev/null 2>&1 || docker network create elasticsearch
          docker run --name es1 --rm --network elasticsearch -d -p 9200:9200 --env "xpack.security.enabled=false" --env "discovery.type=single-node" docker.elastic.co/elasticsearch/${{ env.ELASTICSEARCH_VERSION }}
          docker run --network elasticsearch --rm curlimages/curl --max-time 120 --retry 120 --retry-delay 1  --retry-all-errors --show-error --silent es1:9200
      - run: go test -v -race=true --tags=integration ./...
      - run: docker stop es1
  test-integ-multinode:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with: { fetch-depth: 1 }
      - uses: actions/setup-go@v2.1.3
        with: { go-version: '1.x' }
      - run: go version
      #      - name: Increase system limits
      #        run: |
      #          sudo swapoff -a
      #          sudo sysctl -w vm.swappiness=1
      #          sudo sysctl -w fs.file-max=262144
      #          sudo sysctl -w vm.max_map_count=262144
      - name: Launch Elasticsearch
        run: |
          docker pull --quiet docker.elastic.co/elasticsearch/${{ env.ELASTICSEARCH_VERSION }}
          docker pull --quiet curlimages/curl
          docker network inspect elasticsearch > /dev/null 2>&1 || docker network create elasticsearch
          docker run --name es1 --rm --network elasticsearch -d -p 9200:9200 --env "node.name=es1" --env "xpack.security.enabled=false" --env "cluster.initial_master_nodes=es1" --env "discovery.seed_hosts=es1" docker.elastic.co/elasticsearch/${{ env.ELASTICSEARCH_VERSION }}
          docker run --name es2 --rm --network elasticsearch -d -p 9201:9200 --env "node.name=es2" --env "xpack.security.enabled=false" --env "cluster.initial_master_nodes=es1" --env "discovery.seed_hosts=es1" docker.elastic.co/elasticsearch/${{ env.ELASTICSEARCH_VERSION }}
          docker run --network elasticsearch --rm curlimages/curl --max-time 120 --retry 120 --retry-delay 1  --retry-all-errors --show-error --silent es1:9200
      - run: go test -v --tags=integration,multinode ./...
      - run: docker stop es1 es2